{"version":3,"sources":["utils/store.js","components/PlaylistItem.js","components/Playlist.js","components/TopBar.js","components/EventCheckboxesGroup.js","components/EventPlaylistConfig.js","App.js","serviceWorker.js","index.js"],"names":["reactContext","React","createContext","PlaylistItem","track","classes","useStyles","ListItem","ListItemText","primary","name","secondary","Fragment","Typography","component","variant","color","artists","album","IconButton","className","button","aria-label","onClick","Playlist","tracks","List","playList","map","key","id","scopes","TopBar","token","profilePic","username","ctx","useContext","root","AppBar","position","Toolbar","edge","fontSize","title","grow","Button","data-testid","data-cy","open","playlistTitle","href","join","Avatar","alt","src","avatar","EventCheckboxesGroup","useState","checkboxState","setCheckboxState","eventNames","setEventNames","useEffect","a","fetch","response","json","console","log","Object","keys","forEach","eventName","fetchEventNames","handleChange","event","selectedPlaylistEvents","playlistEvents","indexOf","push","filter","x","target","checked","FormControl","formControl","FormGroup","FormControlLabel","control","Checkbox","onChange","value","label","toUpperCase","require","clientId","clientSecret","redirectUri","setAccessToken","EventPlaylistConfig","setTracks","userId","authToken","forceUpdate","eventToGenres","setEventToGenres","setPlaylistId","fetchEventToGenresMapping","addTracks","pId","trackRecs","trackRecsStrings","trackRec","endpoint","method","headers","Authorization","body","JSON","stringify","then","data","createNewPlaylist","getRecommendations","genres","genresAsString","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","fullWidth","DialogActions","allGenresWithDuplications","reduce","acc","currEventName","concat","Array","from","Set","handleGenerate","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","hash","window","location","substring","split","initial","item","parts","decodeURIComponent","makeStyles","theme","flexGrow","marginTop","spacing","backgroundColor","palette","background","paper","display","breakpoints","up","search","borderRadius","shape","fade","common","white","marginRight","width","marginLeft","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","maxWidth","inline","App","set","useForceUpdate","tokens","setTokens","setProfilePic","setUsername","setUserId","setPlaylistTitle","setPlaylistEvents","store","_token","access_token","res","images","url","display_name","catch","Provider","Container","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4eb170fb.chunk.js","sourcesContent":["import React from 'react';\n\nexport const reactContext = React.createContext();\n\n/*\nexport const ContextProvider ({ children }) => {\n\tconst [playlistTitle, setPlaylistTitle] = React.useState('Untitled Playlist');\n\tconst [playlistEvents, setPlaylistEvents] = React.useState([]);\n\tconst [open, setOpen] = React.useState(true);\n\n\tconst store = {\n\t\tplaylistTitle: [playlistTitle, setPlaylistTitle],\n\t\tplaylistEvents: [playlistEvents, setPlaylistEvents],\n\t\topen: [open, setOpen],\n\t}\n\n\treturn <reactContext.Provider value={store}>{children}</reactContext.Provider>\n}\n*/","import React from 'react';\nimport {useStyles} from '../App';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemSecondaryAction from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\n\nconst giveThumbUp = () =>{\n\n}\n\nconst PlaylistItem = ({ track }) => {\n  const classes = useStyles();\n\n  return(\n\n  <ListItem>\n  <ListItemText\n          primary={track.name}\n          secondary={\n            <React.Fragment>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                color=\"textPrimary\"\n              >\n              {track.artists[0].name}   •\n              </Typography>\n              •   {track.album.name}\n            </React.Fragment>\n          }\n        />\n  <ListItemSecondaryAction>\n      <IconButton  className={classes.button} aria-label=\"Give a thumb up\" onClick={() => giveThumbUp()}>\n        <ThumbUpIcon />\n      </IconButton>\n    </ListItemSecondaryAction>\n  </ListItem>)\n};\n\n\nexport default PlaylistItem;\n","import React from 'react';\nimport PlaylistItem from './PlaylistItem';\nimport {useStyles} from '../App';\n\nimport List from '@material-ui/core/List';\n\nconst Playlist = ({ tracks }) => {\n  const classes = useStyles();\n    return(\n    <List className={classes.playList}>\n      { tracks.map(track => <PlaylistItem track={ track } key={ track.id } />) }\n    </List>\n  );\n};\n\n\n\n\nexport default Playlist;\n","import React from 'react';\nimport {useStyles} from '../App';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport { reactContext } from '../utils/store';\n\n//-----------------START OF SPOTIFY BACKEND SETUP--------------------\nexport const authEndpoint = 'https://accounts.spotify.com/authorize?';\n\nconst clientId = \"690c30f6add5454c8a5660405b6b228c\";\nconst redirectUri = \"http://localhost:3000\";\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"playlist-modify-public\",\n  \"playlist-modify-private\",\n];\n\n\n//-----------------END OF SPOTIFY BACKEND SETUP--------------------\n\n//the token is the authorization token obtained by the Spotify api in app.js\n//might be expired so the login button checks if the token is set\nconst TopBar = ({ token , profilePic, username}) => {\n  const classes = useStyles();\n  const ctx = React.useContext(reactContext);\n\n  return(\n    <div className={classes.root}>\n      <AppBar position=\"static\" >\n        <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\">\n                <MusicNoteIcon fontSize=\"large\" />\n                </IconButton>\n                <Typography className={classes.title} variant=\"h6\">\n                  PlayOurSong\n                </Typography>\n                <div className={classes.grow} />\n                <Button data-testid='title' data-cy=\"title\" variant=\"contained\" color=\"primary\" onClick={() => ctx ? ctx.open[1](true) : null}>\n                {ctx? (ctx.open[0]?'Untitled Playlist':ctx.playlistTitle[0]):''}\n                </Button>\n                <div className={classes.grow} />\n                {!token && (\n                  <IconButton  href={`${authEndpoint}client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`} edge=\"end\" aria-label=\"account of current user\" color=\"inherit\">\n                    <AccountCircle fontSize=\"small\" />\n                  </IconButton>\n                )}\n                {token && (\n                    <div>\n                      <Avatar alt=\"Remy Sharp\" src= {profilePic} className={classes.avatar} />\n                      {/* <span>\n                        <Typography variant=\"button\" display=\"block\" gutterBottom>\n                          {username}\n                        </Typography>\n                      </span>  */}\n                    </div>\n                )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n};\n\nexport default TopBar;\n","import React, {useState, useEffect} from 'react';\nimport {useStyles} from '../App';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { reactContext } from '../utils/store';\n\nconst EventCheckboxesGroup =() =>{\n\tconst [checkboxState, setCheckboxState] = useState({});\n\tconst [eventNames, setEventNames] = useState([]);\n\tconst classes = useStyles();\n\tconst ctx = React.useContext(reactContext);\n\n\tuseEffect(() => {\n\t\tconst fetchEventNames = async () => {\n\t\t\tconst response = await fetch('./data/Event2Genre.json');\n\t\t\tconst json = await response.json();\n\t\t\tconsole.log(json);\n\t\t\tconst eventNames = Object.keys(json);\n\t\t\tsetEventNames(eventNames);\n\t\t\teventNames.forEach((eventName) => {\n\t\t\t\tcheckboxState[eventName] = false;\n\t\t\t});\n\t\t\tsetCheckboxState(checkboxState);\n\t\t};\n\t\tfetchEventNames();\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst handleChange = eventName => event => {\n\t\tlet selectedPlaylistEvents = ctx.playlistEvents[0];\n\t\tif (selectedPlaylistEvents.indexOf(eventName) === -1) {\n\t\t\tselectedPlaylistEvents.push(eventName);\n\t\t}\n\t\telse {\n\t\t\tselectedPlaylistEvents\n\t\t\t\t= selectedPlaylistEvents.filter((x) => x !== eventName);\n\t\t}\n\t\tctx.playlistEvents[1](selectedPlaylistEvents);\n\n\t\tconsole.log('handleChange - eventName', eventName);\n\t\tconsole.log('handleChange - selectedPlaylistEvents', selectedPlaylistEvents);\n\t\tconsole.log('handleChange - event.target.checked', event.target.checked);\n\n\t\tsetCheckboxState({ ...checkboxState, [eventName]: event.target.checked });\n\t}\n\n\treturn (\n\t\t<div className={ classes.root }>\n\t\t\t<FormControl component=\"fieldset\" className={ classes.formControl }>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t{\n\t\t\t\t\t\teventNames.map(eventName => (\n\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t \tcontrol={\n\t\t\t\t\t\t\t\t\t<Checkbox data-testid={`checkBox_${eventName}`} checked={checkboxState[eventName]}\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange(eventName)}\n\t\t\t\t\t\t\t\t\t\tvalue={eventName} />\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabel={eventName.toUpperCase()}/>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</FormGroup>\n\t\t\t</FormControl>\n\t\t</div>\n\t);\n}\n\nexport default EventCheckboxesGroup;\n","import React, {useState, useEffect} from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport { reactContext } from '../utils/store';\nimport EventCheckboxesGroup from \"./EventCheckboxesGroup\";\n\n// FIXME: These are meant to be removed.\nvar client_id = 'b1bcbd4ae171494db0dbd3a736535946'; // Your client id\nvar client_secret = '27127362e5174286a15516cc33a96998'; // Your secret\n// var redirect_uri = 'http://www.google.com'; // Your redirect uri\n// eslint-disable-next-line no-unused-vars\nvar user_id = 'p7x48c95ztmvh1ry6umg0h82f'\nvar SpotifyWebApi = require('spotify-web-api-node');\n// credentials are optional\nvar spotifyApi = new SpotifyWebApi({\n  clientId: client_id,\n  clientSecret: client_secret,\n  redirectUri: 'http://www.example.com/callback'\n});\nspotifyApi.setAccessToken('BQBNXuIYqvAnjRf88UtATB6hNBydlF6KxmYicXJq2xjpHTmIrXt_8H-MOOShTAKndjlLYyFmOYMnsGf2eDocKGooXszvdQr46v385AcwLdNcPZi80Yx4XGcRzDlezQwq-RJoWlm_0zQWHOUKjNQd8PuBW12NGesaIDFvwVOom9Vc7F9k2TkoVV4Z8sJWnbs');\n\nconst EventPlaylistConfig = ({setTracks, userId, authToken, forceUpdate}) =>{\n\tconst [eventToGenres, setEventToGenres] = useState({});\n\t// eslint-disable-next-line no-unused-vars\n\tconst [playlistId, setPlaylistId] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst fetchEventToGenresMapping = async () => {\n\t\t\tconst response = await fetch('./data/Event2Genre.json');\n\t\t\tconst json = await response.json();\n\t\t\tconsole.log(json);\n\t\t\tsetEventToGenres(json);\n\t\t};\n\t\tfetchEventToGenresMapping();\n\t}, []);\n\n\tconst ctx = React.useContext(reactContext);\n\t// console.log(ctx);\n\n\tconst handleChange = () => event => {\n    ctx.playlistTitle[1](event.target.value);\n\t};\n\n\tconst handleGenerate = () => {\n\t\tconsole.log('handleGenerate clicked');\n\t\tconsole.log(ctx);\n\t\tctx.open[1](false);\n\t\t// TODO: @Timo get form information\n\t\tconst playlistTitle = ctx.playlistTitle[0];\n\t\tconst playlistEvents = ctx.playlistEvents[0];\n\t\tconst allGenresWithDuplications = playlistEvents.reduce(\n\t\t\t(acc, currEventName) => acc.concat(eventToGenres[currEventName]),\n\t\t\t[]);\n\t\tconst genres = Array.from(new Set(allGenresWithDuplications));\n\t\tconsole.log(genres);\n\t\tgetRecommendations(genres).then((trackRecs) => {\n\t\t\tcreateNewPlaylist(playlistTitle, trackRecs).then((pId) => {\n\t\t\t\tsetTracks(trackRecs);\n\t\t\t\taddTracks(pId, trackRecs).then(data => {\n\t\t\t\t\tforceUpdate();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// TODO: @Timo add tracks to the new playlist\n\t};\n\n\tconst addTracks = async (pId, trackRecs) => {\n\t\tconsole.log(`playlistid is ${pId}`);\n\t\tconsole.log(\"track recs from genre seeds:\\n\", trackRecs);\n\t\tconst trackRecsStrings = trackRecs.map((trackRec) => `spotify:track:${trackRec.id}`);\n\t\tconst endpoint = `https://api.spotify.com/v1/playlists/${pId}/tracks`;\n\t\treturn await fetch(endpoint, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: \"Bearer \" + authToken,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t'uris': trackRecsStrings,\n\t\t\t}),\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tconsole.log(data);\n\t\t\treturn data;\n\t\t});\n\t};\n\n\tconst createNewPlaylist = async (playlistTitle) => {\n\t\t// spotifyApi.createPlaylist(userId, playlistTitle);\n\t\tconst endpoint = `https://api.spotify.com/v1/users/${userId}/playlists`;\n\t\tconsole.log(\"authToken in createNewPlaylist:\", authToken);\n\t\tconsole.log(\"playlistTitle in createNewPlaylist:\", playlistTitle);\n\t\treturn await fetch(endpoint, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: \"Bearer \" + authToken,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t\t'name': playlistTitle,\n\t\t\t}),\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tconsole.log(data);\n\t\t\tsetPlaylistId(data.id);\n\t\t\tconsole.log(data.id);\n\t\t\treturn data.id;\n\t\t});\n\t};\n\n\tconst getRecommendations = async (genres) => {\n\t\tconst genresAsString = genres.join(\",\");\n\t\tconst endpoint = \"https://api.spotify.com/v1/recommendations?seed_genres=\" + genresAsString;\n\t\treturn await fetch(endpoint, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\tAuthorization: \"Bearer \" + authToken,\n\t\t\t}\n\t\t}).then(response => response.json())\n\t\t.then(data => {\n\t\t\treturn data.tracks;\n\t\t});\n\t};\n\n\treturn (\n    <div>\n      <Dialog data-testid='dialog-container' open={ctx ? ctx.open[0] : false} onClose={() => ctx.open[1](false)} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle data-testid=\"title\" id=\"form-dialog-title\">Generate your playlist in one step</DialogTitle>\n        <DialogContent>\n          <DialogContentText data-testid='dialog-text'>\n            To generate your playlist, please enter the title of your playlist and the type of your event.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            label=\"Playlist Title\"\n        \tonChange={handleChange()}\n            fullWidth\n            data-testid='input'\n            data-cy=\"input\"\n          />\n          <EventCheckboxesGroup/>\n        </DialogContent>\n        <DialogActions>\n          <Button data-testid='generate-bn' data-cy=\"generate-bn\" variant=\"contained\" color=\"primary\"  onClick={() => handleGenerate()}>\n            Generate\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default EventPlaylistConfig;\n","import React, { useEffect, useState } from 'react';\nimport { reactContext } from './utils/store';\nimport Playlist from './components/Playlist';\nimport TopBar from './components/TopBar';\nimport EventPlaylistConfig from './components/EventPlaylistConfig';\nimport { fade,makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBbCXkK69d0bTOb4E5WBdgg9mbchMNzFak\",\n  authDomain: \"ci-test-11a9a.firebaseapp.com\",\n  databaseURL: \"https://ci-test-11a9a.firebaseio.com\",\n  projectId: \"ci-test-11a9a\",\n  storageBucket: \"ci-test-11a9a.appspot.com\",\n  messagingSenderId: \"281561229382\",\n  appId: \"1:281561229382:web:8d9f2af7cbd523ef750247\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\n//-----------------START OF SPOTIFY BACKEND SETUP--------------------\n\n\n// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\n\nwindow.location.hash = \"\";\n\n//-----------------END OF SPOTIFY BACKEND SETUP--------------------\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  formControl: {\n    marginTop: theme.spacing(3),\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.background.paper,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: '200',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      maxWidth: 800,\n    },\n  },\n  playList: {\n    margin: theme.spacing(10, 0, 0, 0),\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n  },\n  inline: {\n    display: 'inline',\n  },\n}));\n\nconst useForceUpdate = () => {\n  const [value, set] = useState(true);\n  console.log(value);\n  return () => {\n    console.log('Force updating...')\n    set(value=> !value);\n  };\n}\n\n\n\nconst App = () =>  {\n  const classes = useStyles();\n  const [tracks, setTracks] = useState([]);\n  const forceUpdate = useForceUpdate();\n  const [tokens, setTokens] = useState();\n  const [profilePic, setProfilePic] = useState();\n  const [username, setUsername] = useState();\n  const [userId, setUserId] = useState();\n\n  const [playlistTitle, setPlaylistTitle] = React.useState('Untitled Playlist');\n\tconst [playlistEvents, setPlaylistEvents] = React.useState([]);\n  const [open, setOpen] = React.useState(true);\n\n  const store = {\n\t\tplaylistTitle: [playlistTitle, setPlaylistTitle],\n\t\tplaylistEvents: [playlistEvents, setPlaylistEvents],\n\t\topen: [open, setOpen],\n\t}\n  \n  useEffect(() => {\n    // Set access token for spotify\n    let _token = hash.access_token;\n    if (_token) {\n      setTokens(_token);\n      console.log(_token);\n    }\n    setTracks(tracks);\n\n    if (_token){\n      fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer ' + _token,\n        }\n      })\n      .then(res => res.json())\n      .then((data) => {\n        //user information returned as a JSON file\n        console.log(data);\n        setProfilePic(data.images[0].url);\n        setUsername(data.display_name);\n        setUserId(data.id);\n      })\n      .catch(console.log)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n\n  return(\n  <React.Fragment>\n  <reactContext.Provider value={store}>\n  <TopBar token={ tokens } username = {username} profilePic = {profilePic} className={classes.grow } />\n  <Container maxWidth=\"md\" >\n    <Playlist tracks={ tracks } />\n  </Container>\n  <EventPlaylistConfig setTracks={ setTracks } userId={ userId } authToken={ tokens } forceUpdate={ forceUpdate }/>\n  </reactContext.Provider>\n  </React.Fragment>\n\n);}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t\t<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}